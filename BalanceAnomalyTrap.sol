// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

interface ITrap {
    function collect() external view returns (bytes memory);
    function shouldRespond(bytes[] calldata data) external pure returns (bool, bytes memory);
}

contract BalanceAnomalyTrap is ITrap {
    // üëá –£–∫–∞–∂–∏ –∑–¥–µ—Å—å —Å–≤–æ–π –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è
    address public constant target = 0xABcDEF1234567890abCDef1234567890AbcDeF12;
    // –ü–æ—Ä–æ–≥ –ø–∞–¥–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    uint256 public constant dropThresholdPercent = 10;

    /// @notice –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ñ—Ñ—á–µ–π–Ω –±–æ—Ç–æ–º
    function collect() external view override returns (bytes memory) {
        // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –Ω–∞–±–ª—é–¥–∞–µ–º–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        return abi.encode(target.balance);
    }

    /// @notice –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è ‚Äî –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å pure
    function shouldRespond(bytes[] calldata data) external pure override returns (bool, bytes memory) {
        if (data.length < 2) {
            return (false, "Insufficient data");
        }

        uint256 current = abi.decode(data[0], (uint256));
        uint256 previous = abi.decode(data[1], (uint256));

        if (previous == 0) {
            return (false, "No previous data");
        }

        if (current < previous) {
            uint256 diff = previous - current;
            uint256 percentDrop = (diff * 100) / previous;

            if (percentDrop >= dropThresholdPercent) {
                return (
                    true,
                    abi.encodePacked("Balance dropped by ", _toString(percentDrop), "%")
                );
            }
        }

        return (false, "");
    }

    /// @dev –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: uint ‚Üí string
    function _toString(uint256 value) internal pure returns (string memory) {
        if (value == 0) return "0";
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }
}
